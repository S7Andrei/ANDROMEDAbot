"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PicoS3 = void 0;
const api_1 = require("./api");
/**
 * A simple class wrapping of the pico s3 functions.
 */
class PicoS3 {
    /**
     * @param {S3RequestOptions} options The authentication details of the S3 bucket.
     *
     * You can simple set this to `true` to get the library to infer the authentication deails of the bucket from the environment variables.
     *
     * Here are the environment variables that need to be set:
     * ```
     * provider         = process.env.PICO_S3_CLOUD_PROVIDER
     * region           = process.env.PICO_S3_REGION
     * bucket           = process.env.PICO_S3_BUCKET
     * accessKeyId      = process.env.PICO_S3_ACCESS_KEY_ID
     * secretAccessKey  = process.env.PICO_S3_SECRET_ACCESS_KEY
     * ```
     */
    constructor(options) {
        if (typeof options === "boolean" && options === true) {
            this.options = {
                provider: process.env.PICO_S3_CLOUD_PROVIDER,
                region: process.env.PICO_S3_REGION,
                bucket: process.env.PICO_S3_BUCKET,
                host: process.env.PICO_S3_HOST,
                accessKeyId: process.env.PICO_S3_ACCESS_KEY_ID,
                secretAccessKey: process.env.PICO_S3_SECRET_ACCESS_KEY,
            };
        }
        else
            this.options = options;
    }
    upload(options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (Buffer.isBuffer(options.file))
                return yield (0, api_1.uploadBuffer)(Object.assign(Object.assign({}, this.options), options));
            else
                return yield (0, api_1.upload)(Object.assign(Object.assign({}, this.options), options));
        });
    }
    getObject(options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0, api_1.getObject)(Object.assign(Object.assign({}, this.options), options));
        });
    }
    getProviderConfig() {
        return (0, api_1.getProviderConfig)(this.options.provider);
    }
    getProvider() {
        return this.options.provider;
    }
    getObjectBuffer(options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0, api_1.getObjectBuffer)(Object.assign(Object.assign({}, this.options), options));
        });
    }
    getObjectDataUrl(options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0, api_1.getObjectDataUrl)(Object.assign(Object.assign({}, this.options), options));
        });
    }
    getObjectBinary(options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0, api_1.getObjectBinary)(Object.assign(Object.assign({}, this.options), options));
        });
    }
    deleteObject(options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0, api_1.deleteObject)(Object.assign(Object.assign({}, this.options), options));
        });
    }
    objectExists(options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0, api_1.objectExists)(Object.assign(Object.assign({}, this.options), options));
        });
    }
    getObjectMetadata(options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0, api_1.getObjectMetadata)(Object.assign(Object.assign({}, this.options), options));
        });
    }
    getObjectEtag(options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0, api_1.getObjectEtag)(Object.assign(Object.assign({}, this.options), options));
        });
    }
    getTextFile(options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0, api_1.getTextFile)(Object.assign(Object.assign({}, this.options), options));
        });
    }
}
exports.PicoS3 = PicoS3;
