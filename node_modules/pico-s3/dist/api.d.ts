/// <reference types="node" />
import { AxiosRequestConfig } from 'axios';
import { AxiosResponse } from 'axios';
export declare class FileNotFoundError extends Error {
    constructor(message: string);
}
/**
 *
 * Data URLs, URLs prefixed with the data: scheme, allow content creators to embed small files inline in documents. They were formerly known as "data URIs" until that name was retired by the WHATWG.
 *
 *
 * Data URLs are composed of four parts: a prefix (data:), a MIME type indicating the type of data, an optional base64 token if non-textual, and the data itself:
 *
 * Example:
 * `"data:[<mediatype>][;base64],<data>"`
 *
 * Learn more here: https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs
 */
export declare type DataURL = string;
export declare enum CLOUD_PROVIDERS {
    GCP = "GCP",
    WASABI = "WASABI",
    AWS = "AWS",
    CONTABO = "CONTABO",
    DO = "DO",
    MINIO = "MINIO"
}
export declare type S3RequestOptions = {
    provider: CLOUD_PROVIDERS;
    accessKeyId: string;
    secretAccessKey: string;
    region?: string;
    bucket: string;
    headers?: {
        [k: string]: string;
    };
    /**
     * Only relevant for MinIO
     */
    host?: string;
};
export declare type S3UploadOptions = {
    filename: string;
    directory?: string;
    public?: boolean;
} & S3RequestOptions;
export declare type S3UploadDataUrlOptions = {
    file: string;
} & S3UploadOptions;
export declare type S3UploadBufferOptions = {
    file: Buffer;
} & S3UploadOptions;
export declare type S3GetOptions = {
    filename: string;
    directory?: string;
} & S3RequestOptions;
export declare const resolvePath: (options: S3GetOptions | S3UploadOptions | {
    filename: string;
    directory?: string;
}) => string;
export declare type SERVICE_PROVIDER_CONFIG = {
    host: (x: S3RequestOptions) => string;
    url: (x: S3GetOptions | S3RequestOptions) => string;
    res: (x: S3GetOptions | S3RequestOptions) => string;
};
export declare const getCloudUrl: (options: S3RequestOptions) => string;
export declare const getProviderConfig: (provider: CLOUD_PROVIDERS) => SERVICE_PROVIDER_CONFIG;
export declare const s3Request: (options: S3RequestOptions, extendedRequestOptions?: {
    [k: string]: any;
    method: "GET" | "PUT" | "POST" | "DELETE" | "HEAD" | "OPTIONS" | "PATCH" | "TRACE";
}) => import("axios").AxiosPromise<any>;
export declare const uploadBuffer: (options: S3UploadBufferOptions) => Promise<string>;
export declare const upload: (options: S3UploadDataUrlOptions) => Promise<string>;
export declare const getObjectBinary: (options: S3GetOptions) => Promise<any>;
export declare const getTextFile: (options: S3GetOptions) => Promise<string>;
export declare const getObjectBuffer: (options: S3GetOptions) => Promise<Buffer>;
export declare const getObjectDataUrl: (options: S3GetOptions) => Promise<string>;
export declare const getObject: (options: S3GetOptions, axiosOverride?: AxiosRequestConfig) => Promise<AxiosResponse>;
export declare const deleteObject: (options: S3GetOptions, axiosOverride?: AxiosRequestConfig) => Promise<boolean>;
export declare const getObjectMetadata: (options: S3GetOptions, axiosOverride?: AxiosRequestConfig) => Promise<{
    [k: string]: string;
}>;
export declare const objectExists: (options: S3GetOptions, axiosOverride?: AxiosRequestConfig) => Promise<boolean>;
export declare const getObjectEtag: (options: S3GetOptions, axiosOverride?: AxiosRequestConfig) => Promise<string>;
