/// <reference types="node" />
import { S3RequestOptions, CLOUD_PROVIDERS, S3UploadOptions, S3GetOptions } from './api';
/**
 * A simple class wrapping of the pico s3 functions.
 */
export declare class PicoS3 {
    options: S3RequestOptions;
    /**
     * @param {S3RequestOptions} options The authentication details of the S3 bucket.
     *
     * You can simple set this to `true` to get the library to infer the authentication deails of the bucket from the environment variables.
     *
     * Here are the environment variables that need to be set:
     * ```
     * provider         = process.env.PICO_S3_CLOUD_PROVIDER
     * region           = process.env.PICO_S3_REGION
     * bucket           = process.env.PICO_S3_BUCKET
     * accessKeyId      = process.env.PICO_S3_ACCESS_KEY_ID
     * secretAccessKey  = process.env.PICO_S3_SECRET_ACCESS_KEY
     * ```
     */
    constructor(options: S3RequestOptions | true);
    upload(options: {
        file: Buffer | string;
    } & S3UploadOptions): Promise<string>;
    getObject(options: S3GetOptions): Promise<import("axios").AxiosResponse<any, any>>;
    getProviderConfig(): import("./api").SERVICE_PROVIDER_CONFIG;
    getProvider(): CLOUD_PROVIDERS;
    getObjectBuffer(options: S3GetOptions): Promise<Buffer>;
    getObjectDataUrl(options: S3GetOptions): Promise<string>;
    getObjectBinary(options: S3GetOptions): Promise<any>;
    deleteObject(options: S3GetOptions): Promise<boolean>;
    objectExists(options: S3GetOptions): Promise<boolean>;
    getObjectMetadata(options: S3GetOptions): Promise<{
        [k: string]: string;
    }>;
    getObjectEtag(options: S3GetOptions): Promise<string>;
    getTextFile(options: S3GetOptions): Promise<string>;
}
